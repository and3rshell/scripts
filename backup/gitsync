#!/usr/bin/env bash

# shellcheck disable=SC1091

source config

declare -A GIT_DIRS=(
    ["scripts"]="$HOME/.local/scripts"
    ["moonwm"]="$HOME/.local/git/moonwm"
    ["st-enhanced"]="$HOME/.local/git/st-enhanced"
    ["dmenu-enhanced"]="$HOME/.local/git/dmenu-enhanced"
    ["work"]="$HOME/.local/git/work"
    ["unix_bootstrap"]="$HOME/.local/git/unix_bootstrap"
    ["nvim"]="$HOME/.config/nvim"
    ["dotfiles"]="$HOME/.local/git/dotfiles"
)

# Dotfiles specific variables
# DOTFILES_GIT_DIR="$HOME/.local/git/dotfiles"
# GIT_WORK_TREE="$HOME"
# DOTFILES_BACKUP_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/gitbackup.cfg"

# dotfiles_push() {
#     [ ! -d "$DOTFILES_GIT_DIR" ] && echo -e "\e[1;31m$DOTFILES_GIT_DIR\e[0m doesn't exist" && exit 1
#     [ ! -f "$DOTFILES_BACKUP_FILE" ] && echo -e "\e[1;31m$DOTFILES_BACKUP_FILE\e[0m doesn't exist" && exit 1

#     files=$(sed "/^#/d;s/\$HOME/\/home\/$USER/g;s/\$XDG_CONFIG_HOME/\/home\/$USER\/\.config/g" "$DOTFILES_BACKUP_FILE")

#     echo -e "Working dir: \e[1;32m$GIT_WORK_TREE\e[0m"
#     cd "$GIT_WORK_TREE" || exit 1

#     git --git-dir="$DOTFILES_GIT_DIR" --work-tree="$GIT_WORK_TREE" add $files
#     git --git-dir="$DOTFILES_GIT_DIR" --work-tree="$GIT_WORK_TREE" commit -m 'sync' --untracked-files=no
#     git --git-dir="$DOTFILES_GIT_DIR" --work-tree="$GIT_WORK_TREE" push
#     echo
# }

# dotfiles_pull() {
#     [ ! -d "$DOTFILES_GIT_DIR" ] && echo -e "\e[1;31m$DOTFILES_GIT_DIR\e[0m doesn't exist" && exit 1

#     echo -e "Working dir: \e[1;32m$GIT_WORK_TREE\e[0m"
#     cd "$GIT_WORK_TREE" || exit 1

#     git --git-dir="$DOTFILES_GIT_DIR" --work-tree="$GIT_WORK_TREE" pull
#     echo
# }

git_status() {
    local dir="$1"

    if [ ! -d "$dir" ]; then
        echo -e "\e[1;31m$dir\e[0m doesn't exist\n"
        return
    fi

    echo -e "Working dir: \e[1;32m$dir\e[0m"
    cd "$dir" || exit 1
    git status -s
    echo
}

git_push() {
    local dir="$1"

    if [ ! -d "$dir" ]; then
        echo -e "\e[1;31m$dir\e[0m doesn't exist\n"
        return
    fi

    echo -e "Working dir: \e[1;32m$dir\e[0m"
    cd "$dir" || exit 1
    git add -A
    git commit -m "sync"
    git push
    echo
}

git_pull() {
    local dir="$1"

    if [ ! -d "$dir" ]; then
        echo -e "\e[1;31m$dir\e[0m doesn't exist"
        echo
        return
    fi

    echo -e "Working dir: \e[1;32m$dir\e[0m"
    cd "$dir" || exit 1
    git pull
    echo
}

case "$1" in
    "status")
        for key in "${!GIT_DIRS[@]}"; do
            git_status "${GIT_DIRS[$key]}"
        done
        ;;
    "push")
        # dotfiles_push
        for key in "${!GIT_DIRS[@]}"; do
            git_push "${GIT_DIRS[$key]}"
        done
        ;;
    "pull")
        # dotfiles_pull
        for key in "${!GIT_DIRS[@]}"; do
            git_pull "${GIT_DIRS[$key]}"
        done
        ;;
    # "push-df")
    #     dotfiles_push
    #     ;;
    # "pull-df")
    #     dotfiles_pull
    #     ;;
    # "status-df")
    #     dir="$DOTFILES_GIT_DIR"
    #     cd "$HOME" || exit 1
    #     [ ! -d "$dir" ] && echo "$dir doesn't exist" && exit 1
    #     git --git-dir="$dir" --work-tree="$HOME" status -s --untracked-files=no
    #     ;;
    *)
        echo "Usage: $0 {status|push|pull|push-df|pull-df|status-df}"
        exit 1
        ;;
esac
