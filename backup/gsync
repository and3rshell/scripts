#!/usr/bin/env bash

# shellcheck disable=SC1091

source config

GIT_BACKUP_FILE="$XDG_CONFIG_HOME/gitbackup.cfg"

gitPush() {
    local pushDir="$1"

    if [ ! -d "$pushDir" ]; then
        echo "Directory $pushDir doesn't exist."
        echo -e "\n================================\n"
        return
    fi

    echoBlue "Current dir: $pushDir"
    cd "$pushDir" || exit 1
    git add . || exit 1
    git commit -m "sync"
    git push || exit 1
    echo -e "\n================================\n"
}

dotfilesPush() {
    gitDir="$HOME/.local/git/$1"
    workTree="$HOME/"

    if [ ! -d "$gitDir" ]; then
        echoRedExit "Directory $gitDir doesn't exist."
    fi

    # files=$(sed "s/\$HOME/\/home\/$USER/g;s/\$XDG_CONFIG_HOME/\/home\/$USER\/\.config/g" $GIT_BACKUP_FILE)
    files=$(sed "/^#/d;s/\$HOME/\/home\/$USER/g;s/\$XDG_CONFIG_HOME/\/home\/$USER\/\.config/g" $GIT_BACKUP_FILE)

    # for file in "${files[@]}"; do
    #     echo $file
    # done

    # exit

    echoBlue "Current dir: $HOME"
    cd "$HOME" || exit 1

    echoBlue -n "Do you want to run backetc? [y/N]"
    read -r answer

    if [ "$answer" == "y" ]; then
        backetc
    fi

    # `git ls-files` to show tracked files
    # for file in "${files[@]}"; do
    git --git-dir="$gitDir" --work-tree="$workTree" add $files
    # done

    git --git-dir="$gitDir" --work-tree="$workTree" commit -m 'sync' --untracked-files=no
    git --git-dir="$gitDir" --work-tree="$workTree" push
    echo -e "\n================================\n"
}

gitPull() {
    local pullDir="$1"

    echo -e "\e[1;34mCurrent dir: $pullDir\e[0m"
    cd "$pullDir" || exit 1
    git pull || exit 1
    echo -e "\n================================\n"
}

gitStatus() {
    local statusDir="$1"

    echo -e "\e[1;34mCurrent dir: $statusDir\e[0m"
    cd "$statusDir" || exit 1
    git status
    echo -e "\n================================\n"
}

dotfilesStatus() {
    echo -e "\e[1;34mdotfiles status:\e[0m"
    cd || exit 1
    git --git-dir="$HOME/.local/git/dotfiles" --work-tree="$HOME/" status --untracked-files=no
    echo -e "\n================================\n"
}

case "$1" in
    "status")
        # TODO for loop
        gitStatus "$HOME/.local/scripts"
        gitStatus "$HOME/.local/git/moonwm"
        gitStatus "$HOME/.local/git/dwmblocks-async"
        gitStatus "$HOME/.local/git/st-enhanced"
        gitStatus "$HOME/.local/git/dmenu-enhanced"
        gitStatus "$HOME/.config/nvim"
        ;;
    "push-dfwork")
        dotfilesPush "dotfiles-work"
        ;;
    "push-df")
        dotfilesPush "dotfiles"
        ;;
    "push")
        # TODO for loop
        gitPush "$HOME/.local/scripts"
        gitPush "$HOME/.config/nvim"
        gitPush "$HOME/.local/git/moonwm"
        gitPush "$HOME/.local/git/dwmblocks-async"
        gitPush "$HOME/.local/git/st-enhanced"
        gitPush "$HOME/.local/git/dmenu-enhanced"
        ;;
    "status-df")
        git --git-dir="$HOME/.local/git/dotfiles" --work-tree="$HOME/" status --untracked-files=no
        ;;
    "status-dfwork")
        git --git-dir="$HOME/.local/git/dotfiles-work" --work-tree="$HOME/" status --untracked-files=no
        ;;
    # "pulldf")
    #     git --git-dir="$HOME/.local/git/dotfiles" --work-tree="$HOME/" pull
    #     ;;
    *)
        echo "use status/push/pull/pushdf" && exit 1
        ;;
esac
